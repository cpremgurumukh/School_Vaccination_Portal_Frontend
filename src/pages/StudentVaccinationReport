import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import * as XLSX from 'xlsx';

const StudentVaccinationReport = () => {
  const [students, setStudents] = useState([]);
  const [filter, setFilter] = useState('');
  const [vaccines, setVaccines] = useState([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  const fetchStudents = async () => {
    const res = await axios.get(`/api/students/report`, {
      params: { vaccine: filter, page }
    });
    setStudents(res.data.data);
    setTotalPages(res.data.totalPages);
  };

  const fetchVaccines = async () => {
    const res = await axios.get('/api/vaccines');
    setVaccines(res.data);
  };

  useEffect(() => {
    fetchVaccines();
    fetchStudents();
  }, [filter, page]);

  const downloadCSV = () => {
    const csv = [
      ['Student Name', 'Vaccine', 'Vaccinated', 'Date'],
      ...students.map(s => [
        s.name,
        s.vaccineName,
        s.vaccinated ? 'Yes' : 'No',
        s.vaccinationDate || 'N/A'
      ])
    ].map(e => e.join(',')).join('\n');

    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' });
    saveAs(blob, 'vaccination_report.csv');
  };

  const downloadExcel = () => {
    const ws = XLSX.utils.json_to_sheet(students);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Report');
    XLSX.writeFile(wb, 'vaccination_report.xlsx');
  };

  const downloadPDF = () => {
    const doc = new jsPDF();
    doc.text('Vaccination Report', 20, 10);
    doc.autoTable({
      head: [['Student Name', 'Vaccine', 'Vaccinated', 'Date']],
      body: students.map(s => [
        s.name,
        s.vaccineName,
        s.vaccinated ? 'Yes' : 'No',
        s.vaccinationDate || 'N/A'
      ])
    });
    doc.save('vaccination_report.pdf');
  };

  return (
    <div className="p-6">
      <h2 className="text-xl font-bold mb-4">Vaccination Report</h2>

      <div className="mb-4">
        <label className="mr-2">Filter by Vaccine:</label>
        <select onChange={e => setFilter(e.target.value)} value={filter}>
          <option value="">All</option>
          {vaccines.map(v => (
            <option key={v.id} value={v.name}>{v.name}</option>
          ))}
        </select>
      </div>

      <table className="min-w-full table-auto border mb-4">
        <thead>
          <tr className="bg-gray-100">
            <th className="border px-4 py-2">Student Name</th>
            <th className="border px-4 py-2">Vaccine</th>
            <th className="border px-4 py-2">Vaccinated</th>
            <th className="border px-4 py-2">Date</th>
          </tr>
        </thead>
        <tbody>
          {students.map(s => (
            <tr key={s.id}>
              <td className="border px-4 py-2">{s.name}</td>
              <td className="border px-4 py-2">{s.vaccineName}</td>
              <td className="border px-4 py-2">{s.vaccinated ? 'Yes' : 'No'}</td>
              <td className="border px-4 py-2">{s.vaccinationDate || 'N/A'}</td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="flex gap-2 mb-4">
        <button onClick={() => setPage(p => Math.max(1, p - 1))} className="bg-gray-200 px-3 py-1">Prev</button>
        <span>Page {page} of {totalPages}</span>
        <button onClick={() => setPage(p => Math.min(totalPages, p + 1))} className="bg-gray-200 px-3 py-1">Next</button>
      </div>

      <div className="flex gap-4">
        <button onClick={downloadCSV} className="bg-blue-500 text-white px-4 py-2 rounded">Download CSV</button>
        <button onClick={downloadExcel} className="bg-green-500 text-white px-4 py-2 rounded">Download Excel</button>
        <button onClick={downloadPDF} className="bg-red-500 text-white px-4 py-2 rounded">Download PDF</button>
      </div>
    </div>
  );
};

export default StudentVaccinationReport;
