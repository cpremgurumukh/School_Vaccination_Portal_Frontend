import apiClient from './apiClient';
import { VaccinationRecord } from '../types/vaccinationRecord.types';

// Data needed to create a new vaccination record
// We omit 'id' as it's generated by the backend.
// We might also omit full student/drive objects if the backend can link by ID.
export interface CreateVaccinationRecordPayload {
  vaccineName: string;
  date: string; // YYYY-MM-DD
  studentId: number;
  driveId: number;
}

/**
 * Adds a new vaccination record.
 * Assumes backend endpoint POST /api/vaccination-records
 */
export const addVaccinationRecord = async (
  recordData: CreateVaccinationRecordPayload
): Promise<VaccinationRecord> => {
  try {
    const response = await apiClient.post<VaccinationRecord>('/vaccination-records', recordData);
    return response.data;
  } catch (error) {
    console.error("Error in addVaccinationRecord:", error);
    throw error;
  }
};

/**
 * Fetches all vaccination records for a specific student.
 * Assumes backend endpoint GET /api/students/{studentId}/vaccination-records
 */
export const getVaccinationRecordsForStudent = async (studentId: number): Promise<VaccinationRecord[]> => {
  try {
    const response = await apiClient.get<VaccinationRecord[]>(`/students/${studentId}/vaccination-records`);
    return response.data;
  } catch (error) {
    console.error(`Error fetching vaccination records for student ${studentId}:`, error);
    throw error;
  }
};

// Add other functions as needed (e.g., updateRecord, deleteRecord)
// export const deleteVaccinationRecord = async (recordId: number): Promise<void> => {
//   try {
//     await apiClient.delete(`/vaccination-records/${recordId}`);
//   } catch (error) {
//     console.error(`Error deleting vaccination record ${recordId}:`, error);
//     throw error;
//   }
// };